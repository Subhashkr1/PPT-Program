Sorting -> O(n log n)
Element Access (n-k) - O(1)

time complexity: O(n log n)
space complexity: O(n)

1. Kth Largest Element in an Array
Approach 1: Maxheap

k << n: O(k log n)

// time complexity: O(n log n)
// space complexity: O(n)

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> maxheap = new PriorityQueue<Integer>(Collections.reverseOrder());
        for(int i : nums){
            maxheap.add(i);
        }
        for(int i= 0 ; i< k-1 ; i++){
            maxheap.poll();
        }
        return maxheap.peek();
    }
}


Approach 2: Minheap
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> maxheap = new PriorityQueue<Integer>(Collections.reverseOrder());
        for(int i : nums){
            maxheap.add(i);
        }
        for(int i= 0 ; i< k-1 ; i++){
            maxheap.poll();
        }
        return maxheap.peek();
    }
}