1. Sqrt(x)
// time complexity: O(log n)
// space complexity: O(1)

class Solution {
    public int mySqrt(int x) {
        if(x < 2){
            return x;
        }

        long num;
        int mid, left = 2, right = x/2;

        while(left <= right){
            mid = left + (right - left)/2;
            num = (long)mid * mid;

            if(num > x){
                // traverse towards left side of an array
                right = mid - 1;
            }
            else if(num < x){
                // traverse towards right side of an array
                left = mid + 1;
            }

            else{
                return mid;
            }
        }
        // we need to return lower bound of a given number
        return right;
    }
}


2. Duplicate Numbers

Approach 1: Sort and comparing the current number to the previous number
time complexity: O(n logn)
space complexity: O(log n)

Approach 2: Using the concept of Sets
time complexity: O(n)
space complexity: O(1)

Approach 3: Negative Marking
time complexity: O(n)
space complexity: O(1)

class Solution {
    public int findDuplicate(int[] nums) {
        int duplicate = -1;
        for(int i=0; i<nums.length; i++){
            int curr = Math.abs(nums[i]);
            if(nums[curr] < 0){
                duplicate = curr;
                break;
            }

            nums[curr] *= -1;
        }

        // Restore the numbers 
        for(int i=0; i<nums.length; i++){
            nums[i] = Math.abs(nums[i]);
        }

        return duplicate;
    }
}

3. Missing Numbers

Approach 1: Sorting and checking out the missing number
time complexity: O(n log n)
space complexity: O(n)


Approach 2: XOR Operation 
time complexity: O(n)
space complexity: O(1)

class Solution {
    public int missingNumber(int[] nums) {
        int missingEle = nums.length;
        for(int i=0; i<nums.length; i++){
            missingEle ^= i^nums[i];
        }

        return missingEle;
    }
}

Approach 3: Gauss' Formula
time complexity: O(n)
space complexity: O(1)


class Solution {
    public int missingNumber(int[] nums) {
        int expectedSum = nums.length * (nums.length + 1)/2;
        int actualSum = 0;
        for(int num: nums){
            actualSum += num;
        }

        return expectedSum - actualSum;
    }
}

4. Find Peak Element
time complexity: O(log n)
space complexity: O(log n)

class Solution {
    public int findPeakElement(int[] nums) {
        return search(nums, 0, nums.length-1);
    }

    public int search(int[] nums, int left, int right){
        if(left == right){
            return left;
        }

        int mid = left+(right - left)/2;
        if(nums[mid] > nums[mid+1]){
            // traverse towards left side of an array
            return search(nums, left, mid);
        }
        // traverse towards right side of an array
        return search(nums, mid+1, right);
    }
}


5. Sort an Array
time complexity: O(n log n)
space complexity: O(n)

class Solution {
    public void merge(int arr[], int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;
 
        // Create temp arrays
        int L[] = new int[n1];
        int R[] = new int[n2];
 
        // Copy data to temp arrays
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];
 
        // Merge the temp arrays
 
        // Initial indices of first and second subarrays
        int i = 0, j = 0;
 
        // Initial index of merged subarray array
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
 
        // Copy remaining elements of L[] if any
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
 
        // Copy remaining elements of R[] if any
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    public void mergeSort(int[] nums, int left, int right){
        if(left < right){
            int mid = left + (right - left)/2;
            mergeSort(nums, left, mid);
            mergeSort(nums, mid+1, right);
            merge(nums, left, mid, right);
        } 
    }

    public int[] sortArray(int[] nums) {
        mergeSort(nums, 0, nums.length-1);
        return nums;
    }
}
